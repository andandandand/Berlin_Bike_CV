# -*- coding: utf-8 -*-
"""download_and_handlabeling_images.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wfbThhfoyQdCNWrD0nC0EuuW1jTA_g4Q
"""

# %pip install mercantile
# %pip install mapbox_vector_tile
# %pip install vt2geojson
# %pip install pydrive

import mercantile, mapbox_vector_tile
import requests, json, os
from vt2geojson.tools import vt_bytes_to_geojson

import time

# from google.colab import drive
from pathlib import Path

import tkinter as tk
from PIL import Image, ImageTk
import io

"""## Define Bounding Box"""

### TODO: insert bounding box!
# a bounding box in [west_lng,_south_lat,east_lng,north_lat] format
west, south, east, north = [
    13.410439632005469,
    52.54064001627449,
    13.413017993264821,
    52.54182552928654,
]

"""#### Setup for image download"""

# vector tile endpoints
tile_coverage = "mly1_public"

# tile layer depends which vector tile endpoints:
# 1. if map features or traffic signs, it will be "point" always
# 2. if looking for coverage, it will be "image" for points, "sequence" for lines, or "overview" for far zoom
tile_layer = "image"

# Mapillary access token -- user should provide their own
access_token = "MLY|6215450018543661|0bb93dcff4f69ed8b1a83e8474f34a89"

# get the list of tiles with x and y coordinates which intersect our bounding box
# MUST be at zoom level 14 where the data is available, other zooms currently not supported
tiles = list(mercantile.tiles(west, south, east, north, 14))

"""#### Setup for saving images"""

# drive.mount('/gdrive')
# data_dir = Path('/gdrive/MyDrive/final_project_first_images')

data_dir = "."

### create new image folder with timestamp
# get timestamp
ts = time.time()
ts = str(ts)
ts = ts.split(".")[0]

new_image_dir = os.path.join(data_dir, ts)
types = ["cobblestones", "road", "bikelane"]

# create main folder
if not os.path.exists(new_image_dir):
    os.makedirs(new_image_dir)

# create subfolder for bikelane, cobblestone, road
for t in types:
    type_dir = os.path.join(new_image_dir, t)
    if not os.path.exists(type_dir):
        os.makedirs(type_dir)

discard = "DISCARD"
labels = types + [discard]

"""#### Define GUI for labeling"""


# define GUI for image labeling
def label_image(image_name, image_url):
    def on_button_click(label):
        nonlocal root
        nonlocal image_name
        nonlocal image_data

        if labels[label] != discard:
            # rename labeled image
            labeled_filename = f"{labels[label]}_{str(image_name)}.jpg"
            labeled_path = os.path.join(new_image_dir, labels[label], labeled_filename)

            # save image
            with open(labeled_path, "wb") as handler:
                handler.write(image_data)

        # close GUI
        root.quit()

    # Initialze GUI
    root = tk.Tk()
    root.title("Labeling")

    image_data = requests.get(image_url, stream=True).content
    img = Image.open(io.BytesIO(image_data))
    img.thumbnail((600, 600))  # Ändern Sie die Größe des Bildes, um es anzuzeigen
    img_tk = ImageTk.PhotoImage(img)

    # Show image
    label = tk.Label(root, image=img_tk)
    label.pack()

    # Create labeling buttons
    for i, label_name in enumerate(labels):
        button = tk.Button(
            root, text=label_name, command=lambda i=i: on_button_click(i)
        )
        button.pack()

    root.mainloop()
    root.destroy()


"""#### Download images and open GUI for labeling"""

# loop through list of tiles to get tile z/x/y to plug in to Mapillary endpoints and make request
for tile in tiles:
    tile_url = (
        "https://tiles.mapillary.com/maps/vtp/{}/2/{}/{}/{}?access_token={}".format(
            tile_coverage, tile.z, tile.x, tile.y, access_token
        )
    )
    response = requests.get(tile_url)
    data = vt_bytes_to_geojson(
        response.content, tile.x, tile.y, tile.z, layer=tile_layer
    )

    # push to output geojson object if yes
    for feature in data["features"]:
        # avoid panorama pictures
        if feature["properties"]["is_pano"]:
            continue

        # get lng,lat of each feature
        lng = feature["geometry"]["coordinates"][0]
        lat = feature["geometry"]["coordinates"][1]

        # ensure feature falls inside bounding box since tiles can extend beyond
        if lng > west and lng < east and lat > south and lat < north:
            # request the URL of each image
            image_id = feature["properties"]["id"]
            header = {"Authorization": "OAuth {}".format(access_token)}
            # chose image size to download
            # thumb_256_url - string, URL to the 256px wide thumbnail.
            # thumb_1024_url - string, URL to the 1024px wide thumbnail.
            # thumb_2048_url - string, URL to the 2048px wide thumbnail.
            image_size = "thumb_1024_url"
            url = "https://graph.mapillary.com/{}?fields={}".format(
                image_id, image_size
            )
            r = requests.get(url, headers=header)
            data = r.json()
            image_url = data[image_size]

            # GUI for labeling:
            label_image(image_id, image_url)

print("Done")
